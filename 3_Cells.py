# Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
# нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
class Cell:
    def __init__(self, count):
        self.count = count
        if self.count <= 0:
            print('Не  бывает таких клеток')
            raise Exception

    def __add__(self, other):
        return Cell(self.count + other.count)

    def __sub__(self, other):
        self.submission = self.count - other.count
        if self.submission >= 0:
            return Cell(self.submission)
        else:
            return 'Отрицательное число клеток'

    def __mul__(self, other):
        return Cell(self.count * other.count)

    def __truediv__(self, other):
        return Cell(round(self.count / other.count))

    def make_order(self, in_row=5):
        self.in_row = in_row
        print((('*' * self.in_row) + '\n') * (self.count // self.in_row) + '*' * (self.count % self.in_row))

    def __str__(self):
        return str(self.count)


cell_1 = Cell(5)
cell_2 = Cell(2)
cell_3 = Cell(7)
# cell_4 = Cell(0)

print(cell_3 + cell_1)
print(cell_1 - cell_3)
print(cell_3 - cell_2)
print(cell_3 * cell_1)
(cell_3 * cell_1).make_order(11)
print(cell_3 / cell_1)
cell_3.make_order()
